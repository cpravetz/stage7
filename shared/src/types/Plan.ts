/**
 * Runtime plan types for the ACCOMPLISH plugin and step execution system
 * These types represent the actual plans generated by LLMs and executed by agents
 */

import { StepDependency } from './Plugin';

/**
 * Input reference for a plan step
 */
export interface PlanInputReference {
    outputName: string;
    sourceStep: number;
    valueType?: 'string' | 'number' | 'boolean' | 'array' | 'object' | 'plan' | 'plugin' | 'any';
    args?: Record<string, any>;
}

/**
 * Input value for a plan step
 */
export interface PlanInputValue {
    value: string;
    valueType: 'string' | 'number' | 'boolean' | 'array' | 'object' | 'plan' | 'plugin' | 'any';
}

/**
 * Input definition for a plan step (can be either a reference or a value)
 */
export type PlanInput = PlanInputReference | PlanInputValue;

/**
 * Enhanced output definition with deliverable properties
 */
export interface PlanOutputDefinition {
    description: string;
    isDeliverable?: boolean;
    filename?: string;
}

/**
 * Output definition for a plan step (can be simple string or enhanced object)
 */
export type PlanOutput = string | PlanOutputDefinition;



/**
 * A single step in a runtime plan
 */
export interface PlanStep {
    number: number;
    actionVerb: string;
    description: string;
    inputs: Record<string, PlanInput>;
    outputs: Record<string, PlanOutput>;
    dependencies?: StepDependency[];
    recommendedRole?: 'Coordinator' | 'Researcher' | 'Coder' | 'Creative' | 'Critic' | 'Executor' | 'Domain Expert';
    steps?: PlanStep[]; // For control flow verbs that contain sub-plans
}

/**
 * A complete runtime plan (array of steps)
 */
export type Plan = PlanStep[];

/**
 * Helper type guards for plan outputs
 */
export namespace PlanOutputHelpers {
    /**
     * Check if an output is an enhanced definition with deliverable properties
     */
    export function isEnhancedOutput(output: PlanOutput): output is PlanOutputDefinition {
        return typeof output === 'object' && output !== null && 'description' in output;
    }

    /**
     * Check if an output is marked as a deliverable
     */
    export function isDeliverable(output: PlanOutput): boolean {
        return isEnhancedOutput(output) && output.isDeliverable === true;
    }

    /**
     * Get the description from any output type
     */
    export function getDescription(output: PlanOutput): string {
        return isEnhancedOutput(output) ? output.description : output;
    }

    /**
     * Get the filename for a deliverable output
     */
    export function getFilename(output: PlanOutput): string | undefined {
        return isEnhancedOutput(output) ? output.filename : undefined;
    }
}

/**
 * Helper type guards for plan inputs
 */
export namespace PlanInputHelpers {
    /**
     * Check if an input is a reference to another step's output
     */
    export function isReference(input: PlanInput): input is PlanInputReference {
        return 'outputName' in input && 'sourceStep' in input;
    }

    /**
     * Check if an input is a constant value
     */
    export function isValue(input: PlanInput): input is PlanInputValue {
        return 'value' in input && 'valueType' in input;
    }
}

/**
 * Plan validation result
 */
export interface PlanValidationResult {
    valid: boolean;
    errors: string[];
    warnings?: string[];
    wrappable_errors?: Array<{
        step_number: number;
        error: string;
        context?: any;
    }>;
}

/**
 * Plan execution context
 */
export interface PlanExecutionContext {
    missionId: string;
    agentId: string;
    parentStepId?: string;
    availableOutputs: Record<number, Set<string>>;
    executionMode?: 'normal' | 'debug' | 'dry-run';
}
