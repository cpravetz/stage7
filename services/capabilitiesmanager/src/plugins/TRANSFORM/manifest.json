{
    "id":"plugin-TRANSFORM",
    "verb":"TRANSFORM",
    "description": "A plugin for performing general data transformations using code snippets.",
    "explanation": "This plugin executes a provided Python code snippet to transform input data.",
    "repository":{"type":"local"},
    "inputGuidance": "Parameters to be passed to the script. Available as a 'params' variable in the script context. The values within 'params' will already be deserialized Python objects (dictionaries, lists, strings, numbers, booleans). Therefore, the Python script should NOT call json.loads() on these values. If referencing outputs from previous steps, embed them directly. For example, to pass 'metrics' from sourceStep 4: '{\"metrics\": {\"outputName\": \"metrics\", \"sourceStep\": 4}}'. The TRANSFORM plugin will make its contents available to the Python script via the 'params' dictionary, with values already converted to native Python types.",
    "inputDefinitions":[
        {
            "name": "script",
            "required": true,
            "type": "string",
            "description": "The Python code snippet to execute for transformation. The code has access to a 'params' variable containing the script_parameters. The script should print its result to stdout rather than returning it.",
            "aliases": ["code","transform_script","snippet"]
        },
        {
            "name": "script_parameters",
            "required": false,
            "type": "json",
            "description": "Parameters to be passed to the script. Available as a 'params' variable in the script context. The values within 'params' will already be deserialized Python objects (dictionaries, lists, strings, numbers, booleans). Therefore, the Python script should NOT call json.loads() on these values. If referencing outputs from previous steps, embed them directly. For example, to pass 'metrics' from sourceStep 4: '{\"metrics\": {\"outputName\": \"metrics\", \"sourceStep\": 4}}'. The TRANSFORM plugin will make its contents available to the Python script via the 'params' dictionary, with values already converted to native Python types.",
            "aliases": ["params","parameters","args"]
        }
    ],
    "outputDefinitions":[
        {
            "name": "transform_result",
            "required": true,
            "type": "string",
            "description": "The output captured from stdout after executing the code snippet. Can be any string data printed by the script."
        }
    ],
    "language":"python",
    "entryPoint":{
      "main":"main.py",
      "packageSource":{"type":"local","path":"./",
      "requirements":"requirements.txt"}
    },
    "security":{
      "permissions":[],
      "sandboxOptions":{},
      "trust":{"signature":""}
    },
    "distribution":{
      "downloads":0,
      "rating":0
    },
    "version":"1.0.0",
    "metadata": {
        "author": "Stage7 Development Team",
        "tags": ["data", "transform", "code", "utility"],
        "category": "data-processing",
        "license": "MIT"
    }
}